export const arbABI = [
    {
        inputs: [
            { internalType: "address", name: "_token", type: "address" },
            { internalType: "address", name: "_relayer", type: "address" },
            { internalType: "string", name: "_chainId", type: "string" },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [{ internalType: "address", name: "owner", type: "address" }],
        name: "OwnableInvalidOwner",
        type: "error",
    },
    {
        inputs: [{ internalType: "address", name: "account", type: "address" }],
        name: "OwnableUnauthorizedAccount",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            { indexed: true, internalType: "address", name: "newOwner", type: "address" },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "bytes32", name: "id", type: "bytes32" },
            { indexed: false, internalType: "string", name: "title", type: "string" },
            { indexed: false, internalType: "uint256", name: "endTime", type: "uint256" },
        ],
        name: "ProposalMirrored",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "bytes32", name: "proposalId", type: "bytes32" },
            {
                indexed: false,
                internalType: "enum SecondaryGovernance.ProposalStatus",
                name: "status",
                type: "uint8",
            },
        ],
        name: "ProposalStatusUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [{ indexed: true, internalType: "address", name: "newRelayer", type: "address" }],
        name: "RelayerUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "bytes32", name: "proposalId", type: "bytes32" },
            { indexed: false, internalType: "address", name: "voter", type: "address" },
            { indexed: false, internalType: "bool", name: "support", type: "bool" },
            { indexed: false, internalType: "uint256", name: "weight", type: "uint256" },
        ],
        name: "Voted",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "bytes32", name: "proposalId", type: "bytes32" },
            { indexed: false, internalType: "uint256", name: "yesVotes", type: "uint256" },
            { indexed: false, internalType: "uint256", name: "noVotes", type: "uint256" },
        ],
        name: "VotesTallied",
        type: "event",
    },
    {
        inputs: [
            { internalType: "bytes32", name: "proposalId", type: "bytes32" },
            { internalType: "bool", name: "support", type: "bool" },
        ],
        name: "castVote",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "chainId",
        outputs: [{ internalType: "string", name: "", type: "string" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "bytes32", name: "proposalId", type: "bytes32" }],
        name: "finalizeVotes",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "getChainId",
        outputs: [{ internalType: "string", name: "", type: "string" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "bytes32", name: "proposalId", type: "bytes32" }],
        name: "getProposalDetails",
        outputs: [
            {
                components: [
                    { internalType: "bytes32", name: "id", type: "bytes32" },
                    { internalType: "string", name: "title", type: "string" },
                    { internalType: "string", name: "description", type: "string" },
                    { internalType: "uint256", name: "yesVotes", type: "uint256" },
                    { internalType: "uint256", name: "noVotes", type: "uint256" },
                    { internalType: "uint256", name: "startTime", type: "uint256" },
                    { internalType: "uint256", name: "endTime", type: "uint256" },
                    {
                        internalType: "enum SecondaryGovernance.ProposalStatus",
                        name: "status",
                        type: "uint8",
                    },
                    { internalType: "bool", name: "voteTallied", type: "bool" },
                ],
                internalType: "struct SecondaryGovernance.Proposal",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getProposalIds",
        outputs: [{ internalType: "bytes32[]", name: "", type: "bytes32[]" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "bytes32", name: "proposalId", type: "bytes32" },
            { internalType: "address", name: "user", type: "address" },
        ],
        name: "getUserVotingPowerAtProposal",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "governanceToken",
        outputs: [{ internalType: "contract ERC20Votes", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "bytes32", name: "proposalId", type: "bytes32" },
            { internalType: "address", name: "user", type: "address" },
        ],
        name: "hasUserVoted",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "isMainChain",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "bytes32", name: "proposalId", type: "bytes32" },
            { internalType: "string", name: "_title", type: "string" },
            { internalType: "string", name: "_description", type: "string" },
            { internalType: "uint256", name: "_startTime", type: "uint256" },
            { internalType: "uint256", name: "_endTime", type: "uint256" },
        ],
        name: "mirrorProposal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [{ internalType: "address", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "relayer",
        outputs: [{ internalType: "address", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "bytes32", name: "proposalId", type: "bytes32" },
            {
                internalType: "enum SecondaryGovernance.ProposalStatus",
                name: "_status",
                type: "uint8",
            },
        ],
        name: "updateProposalStatus",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "_newRelayer", type: "address" }],
        name: "updateRelayer",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
